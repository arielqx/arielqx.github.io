[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I am Ariel, a year 2 CNM (Communications and New Media) student at NUS!"
  },
  {
    "objectID": "about.html#introduction",
    "href": "about.html#introduction",
    "title": "About Me",
    "section": "",
    "text": "I am Ariel, a year 2 CNM (Communications and New Media) student at NUS!"
  },
  {
    "objectID": "about.html#courses-ive-taken",
    "href": "about.html#courses-ive-taken",
    "title": "About Me",
    "section": "Courses I‚Äôve Taken:",
    "text": "Courses I‚Äôve Taken:\nAs of end-2023, I have taken the following modules:\nCommunications and New Media Modules ~\n\nNM1101E - Communications, New Media and Society\nNM2101 - Theories of Communications and New Media\nNM2103 - Quantitative Research Methods\nNM2104 - Qualitative Communication Research Methods\nNM2207 - Computational Media Literacy (this module! üòÑ)\n\nCommon Modules ~\n\nDTK1234 - Design Thinking\nFAS1101 - Writing Academically: Arts and Social Sciences\nHSA1000 - Asian Interconnections\nHSS1000 - Understanding Social Complexity\nHSH1000 - The Human Condition\nHSI1000 - How Science Works, Why Science Works\nGEA1000 - Quantitative Reasoning\n\nFrom each module, I have learnt many valuable skills, and had a lot of fun! üòÅ"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Data Story",
    "section": "",
    "text": "‚ÄúHow influential was the home advantage for the Big Six football clubs in the 21-22 premier league season?‚Äù\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Premier League is the highest tier of football matches in the English football league. A total of 20 top football teams will compete in this league, which takes place between August and May annually, for a total of 380 matches.\nThree points are awarded for a win, one point for a draw, and none are awarded for a loss. The champion emerges with the most points at the end of the season and wins the Premier League title.\nRead more on the Premier League‚Äôs official website.\n\n\n\nOf the 20 football clubs that compete in the Premier League, there have been a dominance of six main football teams since the 2010s.\nThese six football clubs include (in no particular order):\n\n\n\nTeam\nNumber of Wins (since 2009)\n\n\n\n\nManchester United\n2\n\n\nLiverpool\n1\n\n\nArsenal\n0\n\n\nChelsea\n2\n\n\nManchester City\n7\n\n\nTottenham Hotspur\n0\n\n\n\nMore information about why these clubs are the ‚ÄúBig Six‚Äù can be found here.\n\n\n\n\n\n\n\n\n\n\n\n\nIn the Premier League season of 2021-2022, Manchester City football club clinched the championship once again, after winning the 2020-2021 season as well, clocking their 6th Premier League title.\n\n\nTwo sets of data ‚Äúsoccer‚Äù and ‚Äúweekly rank‚Äù with the following variables:\n\n\n'data.frame':   380 obs. of  22 variables:\n $ Date    : chr  \"13/08/2021\" \"14/08/2021\" \"14/08/2021\" \"14/08/2021\" ...\n $ HomeTeam: chr  \"Brentford\" \"Man United\" \"Burnley\" \"Chelsea\" ...\n $ AwayTeam: chr  \"Arsenal\" \"Leeds\" \"Brighton\" \"Crystal Palace\" ...\n $ FTHG    : int  2 5 1 3 3 1 3 0 2 1 ...\n $ FTAG    : int  0 1 2 0 1 0 2 3 4 0 ...\n $ FTR     : chr  \"H\" \"H\" \"A\" \"H\" ...\n $ HTHG    : int  1 1 1 2 0 1 2 0 2 0 ...\n $ HTAG    : int  0 0 0 0 1 0 0 1 1 0 ...\n $ HTR     : chr  \"H\" \"H\" \"H\" \"H\" ...\n $ Referee : chr  \"M Oliver\" \"P Tierney\" \"D Coote\" \"J Moss\" ...\n $ HS      : int  8 16 14 13 14 9 13 14 17 13 ...\n $ AS      : int  22 10 14 4 6 17 11 19 8 18 ...\n $ HST     : int  3 8 3 6 6 5 7 3 3 3 ...\n $ AST     : int  4 3 8 1 3 3 2 8 9 4 ...\n $ HF      : int  12 11 10 15 13 6 18 4 4 11 ...\n $ AF      : int  8 9 7 11 15 10 13 14 3 8 ...\n $ HC      : int  2 5 7 5 6 5 2 3 7 3 ...\n $ AC      : int  5 4 6 2 8 4 4 11 6 11 ...\n $ HY      : int  0 1 2 0 2 1 3 1 1 2 ...\n $ AY      : int  0 2 1 0 0 2 1 1 0 1 ...\n $ HR      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ AR      : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\n'data.frame':   760 obs. of  5 variables:\n $ Team  : chr  \"Man United\" \"Chelsea\" \"Liverpool\" \"West Ham\" ...\n $ GD    : int  4 3 3 2 2 2 1 1 1 1 ...\n $ Points: int  3 3 3 3 3 3 3 3 3 3 ...\n $ Rank  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Week  : int  1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nSignificance\nUsed For\nType\nDF\n\n\n\n\n$HTHG\nHalf Time Home Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTAG\nHalf Time Away Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTR\nHalf Time Result\nAnalysis of home advantage on half time result\nCHR\nsoccer\n\n\n$FTHG\nFull Time Home Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTAG\nFull Time Away Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTR\nFull Time Result\nAnalysis of home advantage on full time result\nCHR\nsoccer\n\n\n$Team\nFootball Club Name\nAnalysis of effect of home advantage on weekly ranking of each FC\nCHR\nweeklyrank\n\n\n$Rank\nRanking out of 20\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n$Week\nWeek Number\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n\n\n\n\nCreating a new data frame (df) by selecting columns ‚ÄúDate‚Äù, ‚ÄúHomeTeam‚Äù, ‚ÄúAwayTeam‚Äù, ‚ÄúFTR‚Äù, ‚ÄúFTHG‚Äù and ‚ÄúFTAG‚Äù.\n\n\n\nHome Team vs Away Team wins for Big 6 Teams:\nFrom the findings, it is clear that from a glance, most of the time the home team will get a win when playing on home grounds. This is most prominent in the case of Liverpool, where out of 20 games, up to 16 games were Home Team wins, and the rest were draws.\n\n\n\n\n\n\n\n\n\nThe advantage could be constituted by the number of shots on target for the home teams on home grounds, considering how they may be used to playing with the specific environments on home ground.\nHence, looking at all six teams‚Äô shots on target when on home grounds as opposed to their opponents:\n\n\n\n\n\n\n\n\n\nFor all of the teams, the home team lines largely seem to be greater than that of the away teams. This is further highlighted for teams A to E, Manchester United, Liverpool, Arsenal, Chelsea and Manchester City, whose home shots on target seem to spike much more in matches against away teams, reaching highs that pull the difference apart. However, Tottenham is an exception, with the highest scores being held by the away teams, hitting up to 10 shots on target.\nOverall, it seems that the home advantage was indeed influential in helping team have more shots on target. ü§î\nWeekly rankings of each team (H vs A vs D):\nPlot the rankings of each team by week number (bar graph)\n\n\n        Team Week Rank\n1 Man United    1    1\n2    Chelsea    1    2\n3  Liverpool    1    3\n4   West Ham    1    4\n5    Everton    1    5\n6  Brentford    1    6\n\n\n\n\n\n\n\n\n\n\n\nFrom the above graph, we can see that most of the teams seem to stay largely at the top ranks for each week, especially teams like Liverpool, Chelsea, and Manchester United. Hence, we take a look at the proportion of games overall played on home ground for each of these three teams to compare:\nMove on over to EPL 21-22 for more information!\n\n\n\n\nAll in all, it is clear that most of the teams playing on home ground do have some advantage, and it does have significant contribution for the games, however there are exceptions such as for teams like Tottenham, and in such cases it is valuable to consider other variable factors affecting the gameplay of the teams involved.\nThanks for reading, and we look forward to our new champions from the ongoing 2022/2023 English Premier League! ‚öΩ\n\n\n\nPremier league competition format & history | premier league. (n.d.). Retrieved 6 November 2023, from https://www.premierleague.com/premier-league-explained\nPremier League match data 2021-2022. (2022, September 25). Kaggle. https://www.kaggle.com/datasets/evangower/premier-league-match-data\nRfordatascience. (n.d.). GitHub - rfordatascience/tidytuesday: Official repo for the #tidytuesday project. GitHub. https://github.com/rfordatascience/tidytuesday/\nWho are the Premier League ‚Äòbig six‚Äô? Top English clubs & nickname explained. (2021, August 13). https://www.sportingnews.com/ca/soccer/news/who-are-premier-league-big-six-top-english-clubs-nickname-explained/8onqxiy3jynf1qr8b8kt8aags"
  },
  {
    "objectID": "question.html",
    "href": "question.html",
    "title": "Ask A Question",
    "section": "",
    "text": "Do you have a question?\nFeel free to drop me an email at: e0969574@u.nus.edu\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello!",
    "section": "",
    "text": "Welcome! üòä\nThis website was created for the module NM2207 Computational Media Literacy!\nCheck out the ‚ÄúAbout Me‚Äù page to read more about me, the‚ÄùPast Projects‚Äù page to read about my progress in NM2207, and the ‚ÄúData Story‚Äù page to take a look at my final project for NM2207.\nIf you have any questions, please head on over to the ‚ÄúAsk A Question‚Äù tab to email any questions to me!\n\nHope you have fun! ü§ç\n\n\n\n Back to top"
  },
  {
    "objectID": "past projects.html",
    "href": "past projects.html",
    "title": "Past Projects",
    "section": "",
    "text": "All relevant documents are uploaded on the Github Repository here.\nHere‚Äôs a snippet of the work I‚Äôve done for NM2207 so far! üòä"
  },
  {
    "objectID": "past projects.html#week-1",
    "href": "past projects.html#week-1",
    "title": "Past Projects",
    "section": "Week 1",
    "text": "Week 1\n\nChallenge"
  },
  {
    "objectID": "past projects.html#week-2",
    "href": "past projects.html#week-2",
    "title": "Past Projects",
    "section": "Week 2",
    "text": "Week 2\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-3",
    "href": "past projects.html#week-3",
    "title": "Past Projects",
    "section": "Week 3",
    "text": "Week 3\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-4",
    "href": "past projects.html#week-4",
    "title": "Past Projects",
    "section": "Week 4",
    "text": "Week 4\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-5",
    "href": "past projects.html#week-5",
    "title": "Past Projects",
    "section": "Week 5",
    "text": "Week 5\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-6",
    "href": "past projects.html#week-6",
    "title": "Past Projects",
    "section": "Week 6",
    "text": "Week 6\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-7",
    "href": "past projects.html#week-7",
    "title": "Past Projects",
    "section": "Week 7",
    "text": "Week 7\n\nChallenge"
  },
  {
    "objectID": "past projects.html#week-8",
    "href": "past projects.html#week-8",
    "title": "Past Projects",
    "section": "Week 8",
    "text": "Week 8\n\nChallenge\nCode Along"
  },
  {
    "objectID": "past projects.html#week-9",
    "href": "past projects.html#week-9",
    "title": "Past Projects",
    "section": "Week 9",
    "text": "Week 9\n\nChallenge and Code Along\nDiary Entry #1"
  },
  {
    "objectID": "practice.html",
    "href": "practice.html",
    "title": "Practice Project",
    "section": "",
    "text": "Downloading data set (API)\n\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.2.3\n\nlibrary(jsonlite) \n\nWarning: package 'jsonlite' was built under R version 4.2.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.1\n\n\nWarning: package 'tidyr' was built under R version 4.2.2\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.2\n\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.0     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.0\n‚úî ggplot2   3.4.3     ‚úî tibble    3.1.8\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.1     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter()  masks stats::filter()\n‚úñ purrr::flatten() masks jsonlite::flatten()\n‚úñ dplyr::lag()     masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\nRetrieving data\n\nhistoric_state_data_url &lt;- \"https://api.covidactnow.org/v2/states.timeseries.json?apiKey=aee461090f09499f86335e3630089532\"  \nraw_data &lt;- GET(historic_state_data_url) \n\n\n\n\nConverting data to a data frame\n\ndata &lt;- fromJSON(rawToChar(raw_data$content))\n\n\n\n\nGet a glimpse of data-set\n\nglimpse(data)\n\nRows: 53\nColumns: 25\n$ fips                           &lt;chr&gt; \"02\", \"01\", \"05\", \"04\", \"06\", \"08\", \"09‚Ä¶\n$ country                        &lt;chr&gt; \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US‚Ä¶\n$ state                          &lt;chr&gt; \"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT‚Ä¶\n$ county                         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ hsa                            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ hsaName                        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ level                          &lt;chr&gt; \"state\", \"state\", \"state\", \"state\", \"st‚Ä¶\n$ lat                            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ locationId                     &lt;chr&gt; \"iso1:us#iso2:us-ak\", \"iso1:us#iso2:us-‚Ä¶\n$ long                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ population                     &lt;int&gt; 731545, 4903185, 3017804, 7278717, 3951‚Ä¶\n$ hsaPopulation                  &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ metrics                        &lt;df[,14]&gt; &lt;data.frame[26 x 14]&gt;\n$ riskLevels                     &lt;df[,6]&gt; &lt;data.frame[26 x 6]&gt;\n$ cdcTransmissionLevel           &lt;int&gt; 2, 4, 3, 3, 1, 4, 4, 1, 4, 4, 2, 3,‚Ä¶\n$ communityLevels                &lt;df[,2]&gt; &lt;data.frame[26 x 2]&gt;\n$ actuals                        &lt;df[,19]&gt; &lt;data.frame[26 x 19]&gt;\n$ annotations                    &lt;df[,30]&gt; &lt;data.frame[26 x 30]&gt;\n$ lastUpdatedDate                &lt;chr&gt; \"2023-10-30\", \"2023-10-30\", \"2023-10‚Ä¶\n$ url                            &lt;chr&gt; \"https://covidactnow.org/us/alaska-ak\",‚Ä¶\n$ metricsTimeseries              &lt;list&gt; [&lt;data.frame[1334 x 14]&gt;], [&lt;data.fr‚Ä¶\n$ actualsTimeseries              &lt;list&gt; [&lt;data.frame[1334 x 20]&gt;], [&lt;data.f‚Ä¶\n$ riskLevelsTimeseries           &lt;list&gt; [&lt;data.frame[1334 x 3]&gt;], [&lt;data.fr‚Ä¶\n$ cdcTransmissionLevelTimeseries &lt;list&gt; [&lt;data.frame[1334 x 2]&gt;], [&lt;data.frame[‚Ä¶\n$ communityLevelsTimeseries      &lt;list&gt; [&lt;data.frame[1334 x 3]&gt;], [&lt;data.frame[‚Ä¶\n\n\n\n\n\nExtracting time-series data from the data-frame\n\ntime_series&lt;-data %&gt;% \n  unnest(actualsTimeseries)\n\nCreating a new data frame with the needed data\n\ntime_series_transmission &lt;- \n  tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"CA\")]]$date)  \n# Transmission levels in each state \ntime_series_transmission$Alaska &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"AK\")]]$cdcTransmissionLevel  \ntime_series_transmission$California &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"CA\")]]$cdcTransmissionLevel  \ntime_series_transmission$New_Jersey &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"NJ\")]]$cdcTransmissionLevel  \ntime_series_transmission$Tennessee &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"TN\")]]$cdcTransmissionLevel  \ntime_series_transmission$District_of_Columbia &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"DC\")]]$cdcTransmissionLevel  \nprint(head(time_series_transmission))\n\n# A tibble: 6 √ó 6\n  Date       Alaska California New_Jersey Tennessee District_of_Columbia\n  &lt;chr&gt;       &lt;int&gt;      &lt;int&gt;      &lt;int&gt;     &lt;int&gt;                &lt;int&gt;\n1 2020-03-01      0          0          0         0                    0\n2 2020-03-02      0          0          0         0                    0\n3 2020-03-03      0          0          0         0                    0\n4 2020-03-04      0          0          0         0                    0\n5 2020-03-05      0          0          0         0                    0\n6 2020-03-06      0          0          0         0                    0\n\n\nSelecting cases of each states from a new data-frame with dates\n\n# New data-frame with dates  \ntime_series_cases &lt;- list(Alaska = time_series %&gt;% filter(state==\"AK\") %&gt;% select(date,cases))   \n# Cases of each state  \ntime_series_cases$California  &lt;- time_series %&gt;% filter(state==\"CA\") %&gt;% select(date,cases)  \ntime_series_cases$New_Jersey  &lt;- time_series %&gt;% filter(state==\"NJ\") %&gt;% select(date,cases)  \ntime_series_cases$Tennessee  &lt;- time_series %&gt;% filter(state==\"TN\") %&gt;% select(date,cases)  \ntime_series_cases$District_of_Columbia  &lt;- time_series %&gt;% filter(state==\"DC\") %&gt;% select(date,cases) \n\n\n\n\nVisualising the data\n\nggplot(data, aes(x=state,y=population)) + geom_bar(stat=\"identity\") +labs(x=\"States\",y=\"Population\") + theme_bw() \n\n\n\n\n\ntime_series_transmission[seq(1,1300,by=100),]%&gt;% \n  pivot_longer(cols=Alaska:District_of_Columbia,names_to=\"Countries\",values_to=\"Transmission\") %&gt;%\n  ggplot(aes(x=Date,y=Transmission,colour=Countries,group=Countries)) +    geom_point(show.legend=TRUE) + labs(x=\"Date\",y=\"Transmission Level\") + theme_bw()\n\n\n\n\nRepresenting the data\n\ndata_to_plot &lt;- tibble(Date_Alaska = time_series_cases$Alaska$date[seq(1,1300,by=100)], Cases_Alaska = time_series_cases$Alaska$cases[seq(1,1300,by=100)],Date_California = time_series_cases$California$date[seq(1,1300,by=100)],Cases_California = time_series_cases$California$cases[seq(1,1300,by=100)],Date_New_Jersey = time_series_cases$New_Jersey$date[seq(1,1300,by=100)],Cases_New_Jersey = time_series_cases$New_Jersey$cases[seq(1,1300,by=100)],        Date_Tennessee = time_series_cases$Tennessee$date[seq(1,1300,by=100)],      Cases_Tennessee = time_series_cases$Tennessee$cases[seq(1,1300,by=100)],           Date_District_of_Columbia = time_series_cases$District_of_Columbia$date[seq(1,1300,by=100)],Cases_District_of_Columbia = time_series_cases$District_of_Columbia$cases[seq(1,1300,by=100)])  \n\ndata_to_plot\n\n# A tibble: 13 √ó 10\n   Date_Alaska Cases_Alaska Date_California Cases_California Date_New_Jersey\n   &lt;chr&gt;              &lt;int&gt; &lt;chr&gt;                      &lt;int&gt; &lt;chr&gt;          \n 1 2020-03-01            NA 2020-01-25                     1 2020-03-01     \n 2 2020-06-09           620 2020-05-04                 56333 2020-06-09     \n 3 2020-09-17          7413 2020-08-12                595097 2020-09-17     \n 4 2020-12-26         45247 2020-11-20               1096427 2020-12-26     \n 5 2021-04-05         63486 2021-02-28               3569578 2021-04-05     \n 6 2021-07-14         71539 2021-06-08               3798225 2021-07-14     \n 7 2021-10-22        132393 2021-09-16               4629146 2021-10-22     \n 8 2022-01-30        211117 2021-12-25               5291605 2022-01-30     \n 9 2022-05-10        252847 2022-04-04               9110544 2022-05-10     \n10 2022-08-18        289203 2022-07-13              10365785 2022-08-18     \n11 2022-11-26        299841 2022-10-21              11338846 2022-11-26     \n12 2023-03-06        307377 2023-01-29              11980312 2023-03-06     \n13 2023-06-14            NA 2023-05-09              12242634 2023-06-14     \n# ‚Ñπ 5 more variables: Cases_New_Jersey &lt;int&gt;, Date_Tennessee &lt;chr&gt;,\n#   Cases_Tennessee &lt;int&gt;, Date_District_of_Columbia &lt;chr&gt;,\n#   Cases_District_of_Columbia &lt;int&gt;\n\n\nPlotting subplots\n\ninstall.packages(\"cowplot\", repos = \"http://cran.us.r-project.org\")  \n\nInstalling package into 'C:/Users/Ariel/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\npackage 'cowplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Ariel\\AppData\\Local\\Temp\\RtmpQBb41z\\downloaded_packages\n\nlibrary(cowplot) \n\nWarning: package 'cowplot' was built under R version 4.2.3\n\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\n\nfig1 &lt;- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"Alaska\") + theme_bw()  \n\nfig2 &lt;- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"California\") + theme_bw()  \n\nfig3 &lt;- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"New Jersey\") + theme_bw()  \n\nfig4 &lt;- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"Tennessee\") + theme_bw()  \n\nfig5 &lt;- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"District of Columbia\") + theme_bw()  \n\nplot_grid(fig1 + theme(legend.justification = c(0,1)),  fig2 + theme(legend.justification = c(1,0)),  fig3 + theme(legend.justification = c(0,1)),  fig4 + theme(legend.justification = c(1,0)),  fig5 + theme(legend.justification = c(0,1)),  align = \"v\", axis = \"lr\", nrow=3, ncol = 2,labels = LETTERS [1:5 ], rel_heights = c(1,2)) \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nVarying the size to play with the resolution\n\nnew_resolution  &lt;-  plot_grid(\n  fig1 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)),  \n  fig2 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 3)),  \n  fig3 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)),  \n  fig4 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 3)),  \n  fig5 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)), align = \"v\", axis = \"lr\", nrow = 3, ncol = 2, labels = LETTERS [1:5 ], rel_heights = c(40, 50)  )  \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\nggsave(\"new_resolution.png\", new_resolution, width = 10, height = 8, units = \"in\") \n\nVarying the colours\n\n# Modify the color for each plot using the fill color for points as an example  \n\nfig1 &lt;- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +  geom_point(color=\"royalblue\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"Alaska\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig2 &lt;- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +  geom_point(color=\"darkseagreen4\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"California\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig3 &lt;- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +  geom_point(color=\"darkorchid4\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"New Jersey\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig4 &lt;- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +  geom_point(color=\"hotpink\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"Tennessee\") + scale_x_discrete(guide = guide_axis(angle = 90)) \n\nfig5 &lt;- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +  geom_point(color=\"coral\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"District of Columbia\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nnew_with_colors  &lt;-  plot_grid(  \n  fig1 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  fig2 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 5)),  \n  fig3 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  fig4 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 5)),  \n  fig5 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  align = \"v\", axis = \"lr\", nrow = 3, ncol = 2, labels = LETTERS [1:5 ], rel_heights = c(40, 50)  )   \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\n# Save the combined plot with increased size  \n\nggsave(\"new_with_colors.png\", new_with_colors, width = 10, height = 8, units = \"in\")\n\nFinal Output:\n\nknitr::include_graphics(\"new_with_colors.png\")"
  },
  {
    "objectID": "practice.html#practice-project-wk-11",
    "href": "practice.html#practice-project-wk-11",
    "title": "Practice Project",
    "section": "",
    "text": "Downloading data set (API)\n\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.2.3\n\nlibrary(jsonlite) \n\nWarning: package 'jsonlite' was built under R version 4.2.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.1\n\n\nWarning: package 'tidyr' was built under R version 4.2.2\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.2\n\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.0     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.0\n‚úî ggplot2   3.4.3     ‚úî tibble    3.1.8\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.1     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter()  masks stats::filter()\n‚úñ purrr::flatten() masks jsonlite::flatten()\n‚úñ dplyr::lag()     masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\nRetrieving data\n\nhistoric_state_data_url &lt;- \"https://api.covidactnow.org/v2/states.timeseries.json?apiKey=aee461090f09499f86335e3630089532\"  \nraw_data &lt;- GET(historic_state_data_url) \n\n\n\n\nConverting data to a data frame\n\ndata &lt;- fromJSON(rawToChar(raw_data$content))\n\n\n\n\nGet a glimpse of data-set\n\nglimpse(data)\n\nRows: 53\nColumns: 25\n$ fips                           &lt;chr&gt; \"02\", \"01\", \"05\", \"04\", \"06\", \"08\", \"09‚Ä¶\n$ country                        &lt;chr&gt; \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US‚Ä¶\n$ state                          &lt;chr&gt; \"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT‚Ä¶\n$ county                         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ hsa                            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ hsaName                        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ level                          &lt;chr&gt; \"state\", \"state\", \"state\", \"state\", \"st‚Ä¶\n$ lat                            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ locationId                     &lt;chr&gt; \"iso1:us#iso2:us-ak\", \"iso1:us#iso2:us-‚Ä¶\n$ long                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ population                     &lt;int&gt; 731545, 4903185, 3017804, 7278717, 3951‚Ä¶\n$ hsaPopulation                  &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ metrics                        &lt;df[,14]&gt; &lt;data.frame[26 x 14]&gt;\n$ riskLevels                     &lt;df[,6]&gt; &lt;data.frame[26 x 6]&gt;\n$ cdcTransmissionLevel           &lt;int&gt; 2, 4, 3, 3, 1, 4, 4, 1, 4, 4, 2, 3,‚Ä¶\n$ communityLevels                &lt;df[,2]&gt; &lt;data.frame[26 x 2]&gt;\n$ actuals                        &lt;df[,19]&gt; &lt;data.frame[26 x 19]&gt;\n$ annotations                    &lt;df[,30]&gt; &lt;data.frame[26 x 30]&gt;\n$ lastUpdatedDate                &lt;chr&gt; \"2023-10-30\", \"2023-10-30\", \"2023-10‚Ä¶\n$ url                            &lt;chr&gt; \"https://covidactnow.org/us/alaska-ak\",‚Ä¶\n$ metricsTimeseries              &lt;list&gt; [&lt;data.frame[1334 x 14]&gt;], [&lt;data.fr‚Ä¶\n$ actualsTimeseries              &lt;list&gt; [&lt;data.frame[1334 x 20]&gt;], [&lt;data.f‚Ä¶\n$ riskLevelsTimeseries           &lt;list&gt; [&lt;data.frame[1334 x 3]&gt;], [&lt;data.fr‚Ä¶\n$ cdcTransmissionLevelTimeseries &lt;list&gt; [&lt;data.frame[1334 x 2]&gt;], [&lt;data.frame[‚Ä¶\n$ communityLevelsTimeseries      &lt;list&gt; [&lt;data.frame[1334 x 3]&gt;], [&lt;data.frame[‚Ä¶\n\n\n\n\n\nExtracting time-series data from the data-frame\n\ntime_series&lt;-data %&gt;% \n  unnest(actualsTimeseries)\n\nCreating a new data frame with the needed data\n\ntime_series_transmission &lt;- \n  tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"CA\")]]$date)  \n# Transmission levels in each state \ntime_series_transmission$Alaska &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"AK\")]]$cdcTransmissionLevel  \ntime_series_transmission$California &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"CA\")]]$cdcTransmissionLevel  \ntime_series_transmission$New_Jersey &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"NJ\")]]$cdcTransmissionLevel  \ntime_series_transmission$Tennessee &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"TN\")]]$cdcTransmissionLevel  \ntime_series_transmission$District_of_Columbia &lt;- time_series$cdcTransmissionLevelTimeseries[[which(data$state==\"DC\")]]$cdcTransmissionLevel  \nprint(head(time_series_transmission))\n\n# A tibble: 6 √ó 6\n  Date       Alaska California New_Jersey Tennessee District_of_Columbia\n  &lt;chr&gt;       &lt;int&gt;      &lt;int&gt;      &lt;int&gt;     &lt;int&gt;                &lt;int&gt;\n1 2020-03-01      0          0          0         0                    0\n2 2020-03-02      0          0          0         0                    0\n3 2020-03-03      0          0          0         0                    0\n4 2020-03-04      0          0          0         0                    0\n5 2020-03-05      0          0          0         0                    0\n6 2020-03-06      0          0          0         0                    0\n\n\nSelecting cases of each states from a new data-frame with dates\n\n# New data-frame with dates  \ntime_series_cases &lt;- list(Alaska = time_series %&gt;% filter(state==\"AK\") %&gt;% select(date,cases))   \n# Cases of each state  \ntime_series_cases$California  &lt;- time_series %&gt;% filter(state==\"CA\") %&gt;% select(date,cases)  \ntime_series_cases$New_Jersey  &lt;- time_series %&gt;% filter(state==\"NJ\") %&gt;% select(date,cases)  \ntime_series_cases$Tennessee  &lt;- time_series %&gt;% filter(state==\"TN\") %&gt;% select(date,cases)  \ntime_series_cases$District_of_Columbia  &lt;- time_series %&gt;% filter(state==\"DC\") %&gt;% select(date,cases) \n\n\n\n\nVisualising the data\n\nggplot(data, aes(x=state,y=population)) + geom_bar(stat=\"identity\") +labs(x=\"States\",y=\"Population\") + theme_bw() \n\n\n\n\n\ntime_series_transmission[seq(1,1300,by=100),]%&gt;% \n  pivot_longer(cols=Alaska:District_of_Columbia,names_to=\"Countries\",values_to=\"Transmission\") %&gt;%\n  ggplot(aes(x=Date,y=Transmission,colour=Countries,group=Countries)) +    geom_point(show.legend=TRUE) + labs(x=\"Date\",y=\"Transmission Level\") + theme_bw()\n\n\n\n\nRepresenting the data\n\ndata_to_plot &lt;- tibble(Date_Alaska = time_series_cases$Alaska$date[seq(1,1300,by=100)], Cases_Alaska = time_series_cases$Alaska$cases[seq(1,1300,by=100)],Date_California = time_series_cases$California$date[seq(1,1300,by=100)],Cases_California = time_series_cases$California$cases[seq(1,1300,by=100)],Date_New_Jersey = time_series_cases$New_Jersey$date[seq(1,1300,by=100)],Cases_New_Jersey = time_series_cases$New_Jersey$cases[seq(1,1300,by=100)],        Date_Tennessee = time_series_cases$Tennessee$date[seq(1,1300,by=100)],      Cases_Tennessee = time_series_cases$Tennessee$cases[seq(1,1300,by=100)],           Date_District_of_Columbia = time_series_cases$District_of_Columbia$date[seq(1,1300,by=100)],Cases_District_of_Columbia = time_series_cases$District_of_Columbia$cases[seq(1,1300,by=100)])  \n\ndata_to_plot\n\n# A tibble: 13 √ó 10\n   Date_Alaska Cases_Alaska Date_California Cases_California Date_New_Jersey\n   &lt;chr&gt;              &lt;int&gt; &lt;chr&gt;                      &lt;int&gt; &lt;chr&gt;          \n 1 2020-03-01            NA 2020-01-25                     1 2020-03-01     \n 2 2020-06-09           620 2020-05-04                 56333 2020-06-09     \n 3 2020-09-17          7413 2020-08-12                595097 2020-09-17     \n 4 2020-12-26         45247 2020-11-20               1096427 2020-12-26     \n 5 2021-04-05         63486 2021-02-28               3569578 2021-04-05     \n 6 2021-07-14         71539 2021-06-08               3798225 2021-07-14     \n 7 2021-10-22        132393 2021-09-16               4629146 2021-10-22     \n 8 2022-01-30        211117 2021-12-25               5291605 2022-01-30     \n 9 2022-05-10        252847 2022-04-04               9110544 2022-05-10     \n10 2022-08-18        289203 2022-07-13              10365785 2022-08-18     \n11 2022-11-26        299841 2022-10-21              11338846 2022-11-26     \n12 2023-03-06        307377 2023-01-29              11980312 2023-03-06     \n13 2023-06-14            NA 2023-05-09              12242634 2023-06-14     \n# ‚Ñπ 5 more variables: Cases_New_Jersey &lt;int&gt;, Date_Tennessee &lt;chr&gt;,\n#   Cases_Tennessee &lt;int&gt;, Date_District_of_Columbia &lt;chr&gt;,\n#   Cases_District_of_Columbia &lt;int&gt;\n\n\nPlotting subplots\n\ninstall.packages(\"cowplot\", repos = \"http://cran.us.r-project.org\")  \n\nInstalling package into 'C:/Users/Ariel/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\npackage 'cowplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Ariel\\AppData\\Local\\Temp\\RtmpQBb41z\\downloaded_packages\n\nlibrary(cowplot) \n\nWarning: package 'cowplot' was built under R version 4.2.3\n\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\n\nfig1 &lt;- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"Alaska\") + theme_bw()  \n\nfig2 &lt;- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"California\") + theme_bw()  \n\nfig3 &lt;- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"New Jersey\") + theme_bw()  \n\nfig4 &lt;- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"Tennessee\") + theme_bw()  \n\nfig5 &lt;- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +  geom_point() + labs(x=\"Date\",y=\"Cases\", title=\"District of Columbia\") + theme_bw()  \n\nplot_grid(fig1 + theme(legend.justification = c(0,1)),  fig2 + theme(legend.justification = c(1,0)),  fig3 + theme(legend.justification = c(0,1)),  fig4 + theme(legend.justification = c(1,0)),  fig5 + theme(legend.justification = c(0,1)),  align = \"v\", axis = \"lr\", nrow=3, ncol = 2,labels = LETTERS [1:5 ], rel_heights = c(1,2)) \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nVarying the size to play with the resolution\n\nnew_resolution  &lt;-  plot_grid(\n  fig1 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)),  \n  fig2 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 3)),  \n  fig3 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)),  \n  fig4 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 3)),  \n  fig5 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 3)), align = \"v\", axis = \"lr\", nrow = 3, ncol = 2, labels = LETTERS [1:5 ], rel_heights = c(40, 50)  )  \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\nggsave(\"new_resolution.png\", new_resolution, width = 10, height = 8, units = \"in\") \n\nVarying the colours\n\n# Modify the color for each plot using the fill color for points as an example  \n\nfig1 &lt;- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +  geom_point(color=\"royalblue\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"Alaska\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig2 &lt;- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +  geom_point(color=\"darkseagreen4\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"California\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig3 &lt;- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +  geom_point(color=\"darkorchid4\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"New Jersey\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nfig4 &lt;- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +  geom_point(color=\"hotpink\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"Tennessee\") + scale_x_discrete(guide = guide_axis(angle = 90)) \n\nfig5 &lt;- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +  geom_point(color=\"coral\", shape=8) + labs(x=\"Date\",y=\"Cases\", title=\"District of Columbia\")  + scale_x_discrete(guide = guide_axis(angle = 90))\n\nnew_with_colors  &lt;-  plot_grid(  \n  fig1 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  fig2 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 5)),  \n  fig3 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  fig4 + theme(legend.justification = c(1, 0), axis.text.x = element_text(size = 5)),  \n  fig5 + theme(legend.justification = c(0, 1), axis.text.x = element_text(size = 5)),  \n  align = \"v\", axis = \"lr\", nrow = 3, ncol = 2, labels = LETTERS [1:5 ], rel_heights = c(40, 50)  )   \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\nRemoved 2 rows containing missing values (`geom_point()`).\n\n# Save the combined plot with increased size  \n\nggsave(\"new_with_colors.png\", new_with_colors, width = 10, height = 8, units = \"in\")\n\nFinal Output:\n\nknitr::include_graphics(\"new_with_colors.png\")"
  },
  {
    "objectID": "past projects.html#week-10",
    "href": "past projects.html#week-10",
    "title": "Past Projects",
    "section": "Week 10",
    "text": "Week 10\n\nDiary Entry #2"
  },
  {
    "objectID": "project.html#premier-league-21-22",
    "href": "project.html#premier-league-21-22",
    "title": "Data Story",
    "section": "",
    "text": "‚ÄúHow influential was the home advantage for the Big Six football clubs in the 21-22 premier league season?‚Äù\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Premier League is the highest tier of football matches in the English football league. A total of 20 top football teams will compete in this league, which takes place between August and May annually, for a total of 380 matches.\nThree points are awarded for a win, one point for a draw, and none are awarded for a loss. The champion emerges with the most points at the end of the season and wins the Premier League title.\nRead more on the Premier League‚Äôs official website.\n\n\n\nOf the 20 football clubs that compete in the Premier League, there have been a dominance of six main football teams since the 2010s.\nThese six football clubs include (in no particular order):\n\n\n\nTeam\nNumber of Wins (since 2009)\n\n\n\n\nManchester United\n2\n\n\nLiverpool\n1\n\n\nArsenal\n0\n\n\nChelsea\n2\n\n\nManchester City\n7\n\n\nTottenham Hotspur\n0\n\n\n\nMore information about why these clubs are the ‚ÄúBig Six‚Äù can be found on sportingnews.com.\n\n\n\n\n\n\n\n\n\n\n\n\nIn the Premier League season of 2021-2022, Manchester City football club clinched the championship once again, after winning the 2020-2021 season as well, clocking their 6th Premier League title.\n\n\n\nAcquiring the relevant (cleaned) data-sets:\n\nLooking at structure of data-frame of relevant match details:\n\n\nsoccer &lt;- read.csv(\"soccer21-22.csv\")\nweeklyrank &lt;- read.csv(\"weeklyrank.csv\")\nstr(soccer)\n\n'data.frame':   380 obs. of  22 variables:\n $ Date    : chr  \"13/08/2021\" \"14/08/2021\" \"14/08/2021\" \"14/08/2021\" ...\n $ HomeTeam: chr  \"Brentford\" \"Man United\" \"Burnley\" \"Chelsea\" ...\n $ AwayTeam: chr  \"Arsenal\" \"Leeds\" \"Brighton\" \"Crystal Palace\" ...\n $ FTHG    : int  2 5 1 3 3 1 3 0 2 1 ...\n $ FTAG    : int  0 1 2 0 1 0 2 3 4 0 ...\n $ FTR     : chr  \"H\" \"H\" \"A\" \"H\" ...\n $ HTHG    : int  1 1 1 2 0 1 2 0 2 0 ...\n $ HTAG    : int  0 0 0 0 1 0 0 1 1 0 ...\n $ HTR     : chr  \"H\" \"H\" \"H\" \"H\" ...\n $ Referee : chr  \"M Oliver\" \"P Tierney\" \"D Coote\" \"J Moss\" ...\n $ HS      : int  8 16 14 13 14 9 13 14 17 13 ...\n $ AS      : int  22 10 14 4 6 17 11 19 8 18 ...\n $ HST     : int  3 8 3 6 6 5 7 3 3 3 ...\n $ AST     : int  4 3 8 1 3 3 2 8 9 4 ...\n $ HF      : int  12 11 10 15 13 6 18 4 4 11 ...\n $ AF      : int  8 9 7 11 15 10 13 14 3 8 ...\n $ HC      : int  2 5 7 5 6 5 2 3 7 3 ...\n $ AC      : int  5 4 6 2 8 4 4 11 6 11 ...\n $ HY      : int  0 1 2 0 2 1 3 1 1 2 ...\n $ AY      : int  0 2 1 0 0 2 1 1 0 1 ...\n $ HR      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ AR      : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\nLooking at structure of data-frame of weekly rankings:\n\n\nstr(weeklyrank)\n\n'data.frame':   760 obs. of  5 variables:\n $ Team  : chr  \"Man United\" \"Chelsea\" \"Liverpool\" \"West Ham\" ...\n $ GD    : int  4 3 3 2 2 2 1 1 1 1 ...\n $ Points: int  3 3 3 3 3 3 3 3 3 3 ...\n $ Rank  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Week  : int  1 1 1 1 1 1 1 1 1 1 ...\n\n\nFrom the above we can identify a few important variables:\n\n\n\n\n\n\n\n\n\n\nVariable\nSignificance\nUsed For\nType\nDF\n\n\n\n\n$HTHG\nHalf Time Home Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTAG\nHalf Time Away Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTR\nHalf Time Result\nAnalysis of home advantage on half time result\nCHR\nsoccer\n\n\n$FTHG\nFull Time Home Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTAG\nFull Time Away Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTR\nFull Time Result\nAnalysis of home advantage on full time result\nCHR\nsoccer\n\n\n$Team\nFootball Club Name\nAnalysis of effect of home advantage on weekly ranking of each FC\nCHR\nweeklyrank\n\n\n$Rank\nRanking out of 20\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n$Week\nWeek Number\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n\nCreating a new data frame:\nWIP‚Ä¶\n\n\n\nWIP‚Ä¶\n\n\n\nWIP‚Ä¶\n\n\n\nWIP‚Ä¶"
  },
  {
    "objectID": "past projects.html#week-11",
    "href": "past projects.html#week-11",
    "title": "Past Projects",
    "section": "Week 11",
    "text": "Week 11\n\nDiary Entry #3"
  },
  {
    "objectID": "project.html#research-question",
    "href": "project.html#research-question",
    "title": "Data Story",
    "section": "",
    "text": "‚ÄúHow influential was the home advantage for the Big Six football clubs in the 21-22 premier league season?‚Äù"
  },
  {
    "objectID": "project.html#about-the-premier-league",
    "href": "project.html#about-the-premier-league",
    "title": "Data Story",
    "section": "",
    "text": "The Premier League is the highest tier of football matches in the English football league. A total of 20 top football teams will compete in this league, which takes place between August and May annually, for a total of 380 matches.\nThree points are awarded for a win, one point for a draw, and none are awarded for a loss. The champion emerges with the most points at the end of the season and wins the Premier League title.\nRead more on the Premier League‚Äôs official website."
  },
  {
    "objectID": "project.html#big-six-fcs",
    "href": "project.html#big-six-fcs",
    "title": "Data Story",
    "section": "",
    "text": "Of the 20 football clubs that compete in the Premier League, there have been a dominance of six main football teams since the 2010s.\nThese six football clubs include (in no particular order):\n\n\n\nTeam\nNumber of Wins (since 2009)\n\n\n\n\nManchester United\n2\n\n\nLiverpool\n1\n\n\nArsenal\n0\n\n\nChelsea\n2\n\n\nManchester City\n7\n\n\nTottenham Hotspur\n0\n\n\n\nMore information about why these clubs are the ‚ÄúBig Six‚Äù can be found here."
  },
  {
    "objectID": "project.html#premier-league-2021-2022",
    "href": "project.html#premier-league-2021-2022",
    "title": "Data Story",
    "section": "",
    "text": "In the Premier League season of 2021-2022, Manchester City football club clinched the championship once again, after winning the 2020-2021 season as well, clocking their 6th Premier League title.\n\n\nTwo sets of data ‚Äúsoccer‚Äù and ‚Äúweekly rank‚Äù with the following variables:\n\n\n'data.frame':   380 obs. of  22 variables:\n $ Date    : chr  \"13/08/2021\" \"14/08/2021\" \"14/08/2021\" \"14/08/2021\" ...\n $ HomeTeam: chr  \"Brentford\" \"Man United\" \"Burnley\" \"Chelsea\" ...\n $ AwayTeam: chr  \"Arsenal\" \"Leeds\" \"Brighton\" \"Crystal Palace\" ...\n $ FTHG    : int  2 5 1 3 3 1 3 0 2 1 ...\n $ FTAG    : int  0 1 2 0 1 0 2 3 4 0 ...\n $ FTR     : chr  \"H\" \"H\" \"A\" \"H\" ...\n $ HTHG    : int  1 1 1 2 0 1 2 0 2 0 ...\n $ HTAG    : int  0 0 0 0 1 0 0 1 1 0 ...\n $ HTR     : chr  \"H\" \"H\" \"H\" \"H\" ...\n $ Referee : chr  \"M Oliver\" \"P Tierney\" \"D Coote\" \"J Moss\" ...\n $ HS      : int  8 16 14 13 14 9 13 14 17 13 ...\n $ AS      : int  22 10 14 4 6 17 11 19 8 18 ...\n $ HST     : int  3 8 3 6 6 5 7 3 3 3 ...\n $ AST     : int  4 3 8 1 3 3 2 8 9 4 ...\n $ HF      : int  12 11 10 15 13 6 18 4 4 11 ...\n $ AF      : int  8 9 7 11 15 10 13 14 3 8 ...\n $ HC      : int  2 5 7 5 6 5 2 3 7 3 ...\n $ AC      : int  5 4 6 2 8 4 4 11 6 11 ...\n $ HY      : int  0 1 2 0 2 1 3 1 1 2 ...\n $ AY      : int  0 2 1 0 0 2 1 1 0 1 ...\n $ HR      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ AR      : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\n'data.frame':   760 obs. of  5 variables:\n $ Team  : chr  \"Man United\" \"Chelsea\" \"Liverpool\" \"West Ham\" ...\n $ GD    : int  4 3 3 2 2 2 1 1 1 1 ...\n $ Points: int  3 3 3 3 3 3 3 3 3 3 ...\n $ Rank  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Week  : int  1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nSignificance\nUsed For\nType\nDF\n\n\n\n\n$HTHG\nHalf Time Home Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTAG\nHalf Time Away Goals\nAnalysis of home advantage on half time result\nINT\nsoccer\n\n\n$HTR\nHalf Time Result\nAnalysis of home advantage on half time result\nCHR\nsoccer\n\n\n$FTHG\nFull Time Home Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTAG\nFull Time Away Goals\nAnalysis of home advantage on full time result\nINT\nsoccer\n\n\n$FTR\nFull Time Result\nAnalysis of home advantage on full time result\nCHR\nsoccer\n\n\n$Team\nFootball Club Name\nAnalysis of effect of home advantage on weekly ranking of each FC\nCHR\nweeklyrank\n\n\n$Rank\nRanking out of 20\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n$Week\nWeek Number\nAnalysis of effect of home advantage on weekly ranking of each FC\nINT\nweeklyrank\n\n\n\n\n\n\nCreating a new data frame (df) by selecting columns ‚ÄúDate‚Äù, ‚ÄúHomeTeam‚Äù, ‚ÄúAwayTeam‚Äù, ‚ÄúFTR‚Äù, ‚ÄúFTHG‚Äù and ‚ÄúFTAG‚Äù.\n\n\n\nHome Team vs Away Team wins for Big 6 Teams:\nFrom the findings, it is clear that from a glance, most of the time the home team will get a win when playing on home grounds. This is most prominent in the case of Liverpool, where out of 20 games, up to 16 games were Home Team wins, and the rest were draws.\n\n\n\n\n\n\n\n\n\nThe advantage could be constituted by the number of shots on target for the home teams on home grounds, considering how they may be used to playing with the specific environments on home ground.\nHence, looking at all six teams‚Äô shots on target when on home grounds as opposed to their opponents:\n\n\n\n\n\n\n\n\n\nFor all of the teams, the home team lines largely seem to be greater than that of the away teams. This is further highlighted for teams A to E, Manchester United, Liverpool, Arsenal, Chelsea and Manchester City, whose home shots on target seem to spike much more in matches against away teams, reaching highs that pull the difference apart. However, Tottenham is an exception, with the highest scores being held by the away teams, hitting up to 10 shots on target.\nOverall, it seems that the home advantage was indeed influential in helping team have more shots on target. ü§î\nWeekly rankings of each team (H vs A vs D):\nPlot the rankings of each team by week number (bar graph)\n\n\n        Team Week Rank\n1 Man United    1    1\n2    Chelsea    1    2\n3  Liverpool    1    3\n4   West Ham    1    4\n5    Everton    1    5\n6  Brentford    1    6\n\n\n\n\n\n\n\n\n\n\n\nFrom the above graph, we can see that most of the teams seem to stay largely at the top ranks for each week, especially teams like Liverpool, Chelsea, and Manchester United. Hence, we take a look at the proportion of games overall played on home ground for each of these three teams to compare:\nMove on over to EPL 21-22 for more information!"
  },
  {
    "objectID": "past projects.html#week-12",
    "href": "past projects.html#week-12",
    "title": "Past Projects",
    "section": "Week 12",
    "text": "Week 12\n\nDiary Entry #4"
  },
  {
    "objectID": "project.html#conclusion",
    "href": "project.html#conclusion",
    "title": "Data Story",
    "section": "",
    "text": "All in all, it is clear that most of the teams playing on home ground do have some advantage, and it does have significant contribution for the games, however there are exceptions such as for teams like Tottenham, and in such cases it is valuable to consider other variable factors affecting the gameplay of the teams involved.\nThanks for reading, and we look forward to our new champions from the ongoing 2022/2023 English Premier League! ‚öΩ"
  },
  {
    "objectID": "project.html#references",
    "href": "project.html#references",
    "title": "Data Story",
    "section": "",
    "text": "Premier league competition format & history | premier league. (n.d.). Retrieved 6 November 2023, from https://www.premierleague.com/premier-league-explained\nPremier League match data 2021-2022. (2022, September 25). Kaggle. https://www.kaggle.com/datasets/evangower/premier-league-match-data\nRfordatascience. (n.d.). GitHub - rfordatascience/tidytuesday: Official repo for the #tidytuesday project. GitHub. https://github.com/rfordatascience/tidytuesday/\nWho are the Premier League ‚Äòbig six‚Äô? Top English clubs & nickname explained. (2021, August 13). https://www.sportingnews.com/ca/soccer/news/who-are-premier-league-big-six-top-english-clubs-nickname-explained/8onqxiy3jynf1qr8b8kt8aags"
  },
  {
    "objectID": "app2.html",
    "href": "app2.html",
    "title": "EPL 21-22",
    "section": "",
    "text": "Attaching package: 'DT'\n\n\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n\n\n\nListening on http://127.0.0.1:4320\n\n\n\n\n\n\n\n\n Back to top"
  }
]